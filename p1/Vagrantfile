# Import de l'environnement
if File.exist?('./confs/env.sh')
  File.foreach('./confs/env.sh') do |line|
    # Ignorer les lignes vides ou les lignes de commentaire
    next if line.strip.empty? || line.strip.start_with?("#")
    
    # Utiliser une regex pour ignorer les commentaires de fin de ligne
    match = line.match(/^export\s+(\w+)="?([^"#]+)"?/)
    next unless match
    
    key, value = match.captures
    ENV[key] = value.strip # Supprime les espaces blancs potentiels
    puts ENV[key]
  end
end


#test
puts PATH_SHARED_FOLDER

# Configuration des VMs
Vagrant.configure("2") do |config| # "2" => version de la configuration

  config.vm.box = "generic/alpine319" # Alpine Linux LTS (https://vagrantcloud.com/search)
  config.vm.box_version = "4.3.8"
  config.vm.synced_folder "shared", PATH_SHARED_FOLDER # Dossier partagé entre les 2 VMs

  # Configuration de la première VM (contrôleur K3s)
  config.vm.define SERVER_NAME do |server|
    server.vm.hostname =  SERVER_NAME 
    config.vm.network "private_network", ip: SERVER_IP # Réseau privé accessible par IP
    config.vm.provider VM_PROVIDER do | vb |
      # vb.name = SERVER_NAME
      vb.memory = VM_MEMORY
      vb.cpus = VM_CPUS
      vb.gui = true
    end
    # Configuration du provisionnement pour installer K3s
    server.vm.provision "shell", path: "./scripts/server_install.sh"
  end

  # Configuration de la deuxième VM (agent K3s)
  config.vm.define AGENT_NAME do |agent|
    agent.vm.hostname = AGENT_NAME 
    config.vm.network "private_network", ip: AGENT_IP # Réseau privé accessible par IP
    config.vm.provider VM_PROVIDER do | vb |
      # vb.name = AGENT_NAME
      vb.memory = VM_MEMORY
      vb.cpus = VM_CPUS
      vb.gui = true
    end
    # Configuration du provisionnement pour rejoindre le cluster K3s
    agent.vm.provision "shell", path: "./scripts/agent_install.sh"
  end
end
